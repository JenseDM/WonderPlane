<link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />
@page "/flights-found"
@using WonderPlane.Shared;
@using MudBlazor;
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation


<main class="main-container poppins-light">
    <div class="container-search">
    <div Class="flight-search-card">
        <MudForm Model="@searchModel" @bind-IsValid="@isValid" Style="width:100%">
            <div class="radio-group">
                <MudRadioGroup @bind-Value="Dense_Radio">
                    <MudRadio Value="true" Color="Color.Info" Dense="true">Ida y Vuelta</MudRadio>
                    <MudRadio Value="false" Color="Color.Info" Dense="false">Solo ida</MudRadio>
                </MudRadioGroup>
            </div>
            <div class="form-search">
                    <div class="input">
                        <div class="autocomplete-container">
                            <label class="form-label">Origen</label>
                            <input type="text" class="form-control"
                                   @bind="searchModel.Origin"
                                   @oninput="FilterCities"
                                   placeholder="Ingresa el Destino" />
                            <ul class="autocomplete-results" style="display:@(filteredCities.Any() ? "block" : "none")">
                                @foreach (var city in filteredCities)
                                {
                                    <li @onclick="() => SelectCity(city)">
                                        @if (!string.IsNullOrEmpty(city.image))
                                        {
                                            <img src="@city.image" alt="@city.city" class="city-image" />
                                        }
                                        <div class="cities">
                                            <span>@city.city - @city.country (@city.country_code)</span>
                                            <h7>@city.airport</h7>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                    <div class="input">
                        <div class="autocomplete-container">
                            <label class="form-label">Destino</label>
                            <input type="text" class="form-control"
                                   @bind="searchModel.Destination"
                                   @oninput="FliterCitiesDestination"
                                   placeholder="Ingresa el Destino" />
                            <ul class="autocomplete-results" style="display:@(filterCitiesDestination.Any() ? "block" : "none")">
                                @foreach (var city in filterCitiesDestination)
                                {
                                    <li @onclick="() => SelectCityDestination(city)">
                                        @if (!string.IsNullOrEmpty(city.image))
                                        {
                                            <img src="@city.image" alt="@city.city" class="city-image" />
                                        }
                                        <div class="cities">
                                            <span>@city.city - @city.country (@city.country_code)</span>
                                            <h7>@city.airport</h7>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>

                <MudDivider Vertical="true" FlexItem="true" />
                <div class="input">
                    <label class="form-label">Ida</label>
                    <InputDate @bind-Value="searchModel.DepartureDate" class="form-control" style="font-size: 0.9rem;color: #507687"></InputDate>
                </div>
                    @if (Dense_Radio == true)
                    {
                        <div class="input">
                            <label class="form-label">Regreso</label>
                            <InputDate @bind-Value="searchModel.ReturnDate" class="form-control" style="font-size: 0.9rem;color: #507687"></InputDate>
                        </div>
                    }
                <MudDivider Vertical="true" FlexItem="true" />
                    <div class="input">
                        <label class="form-label">Pasajeros</label>
                        <div class="input-group">
                            <span class="material-symbols-outlined">
                                person
                            </span>
                            <InputNumber @bind-Value="searchModel.Passengers" class="form-control" style="font-size: 0.9rem;color: #507687" Min="1" Max="10"></InputNumber>
                        </div>
                    </div>
                <div class="form-button">
                    <button class="submit-button" type="submit">Buscar</button>
                </div>
            </div>
        </MudForm>
    </div>
    </div>
    <div class="container-flight-info">
        <div class="container-flight-1">
            <div class="container-flight-origin">
                <h5>20:55 CLO</h5>
                <h6>21 nov (jue)</h6>
            </div>
            <div class="container-flight-duration">
                <h7>1h 30m</h7>
                <div class="line"></div>
                <h8>Directo</h8>
            </div>
            <div class="container-flight-destination">
                <h5>20:55 BOG</h5>
                <h6>23 nov (sab)</h6>
            </div>
            <MudDivider Vertical="true" FlexItem="true" />
            <div class="container-flight-airline">
                <h7>WonderPlane</h7>
                <span class="material-symbols-outlined">
                    travel
                </span>
            </div>
            <MudDivider Vertical="true" FlexItem="true"/>
        </div>

        <div class="container-flight-2">
            <div class="container-flight-price">
                <h5>COP$</h5>
                <h5 class="price">120.000</h5>
            </div>
            <h7>Precio por pasajero</h7>
            <div class="form-button-2">
                <button class="submit-button-2" type="submit">Seleccionar</button>
            </div>
        </div>
    </div>
</main>

<style>
    .mud-radio > .mud-radio-content {
        font-weight: 600;
        color: #071952;
        font-family: 'Poppins', sans-serif;
    }
</style>


@code {
    private FlightSearchModel searchModel = new();
    private bool isValid;
    private DateTime? _date = DateTime.Today;
    public bool Dense_Radio { get; set; } = true;

    public class FlightSearchModel
    {
        [Required]
        public string Origin { get; set; }

        [Required]
        public string Destination { get; set; }

        [Required]
        public DateTime DepartureDate { get; set; } = DateTime.Today;

        public DateTime? ReturnDate { get; set; } = DateTime.Today;

        [Required]
        public string FlightType { get; set; }

        [Required]
        [Range(1, 10, ErrorMessage = "Debe haber al menos un pasajero y máximo diez.")]
        public int Passengers { get; set; } = 1;
    }
    private List<AddFlights> allCities = new();
    private List<AddFlights> nationalCities = new();
    private List<AddFlights> internationalCities = new();

    public Color SelectedColor { get; set; } = Color.Default;

    protected override async Task OnInitializedAsync()
    {
        // Carga ciudades nacionales
        var localClient = HttpClientFactory.CreateClient("LocalClient");
        var nationalList = await localClient.GetFromJsonAsync<List<AddFlights>>("sample-data/flightsNational.json");
        if (nationalList != null)
        {
            foreach (var city in nationalList)
            {
                allCities.Add(city);
            }
        }

        var internationalList = await localClient.GetFromJsonAsync<List<AddFlights>>("sample-data/flightsInternational.json");
        if (internationalList != null)
        {
            foreach (var city in internationalList)
            {
                if (city.type == "international")
                {
                    allCities.Add(city);
                }
            }
        }
    }

    private List<AddFlights> filteredCities = new();
    private List<AddFlights> filterCitiesDestination = new();

    private void FilterCities(ChangeEventArgs e)
    {
        string input = e.Value?.ToString() ?? string.Empty;
        filteredCities = allCities
            .Where(c => c.city.Contains(input, StringComparison.OrdinalIgnoreCase))
            .Take(10)
            .ToList();
    }

    private void FliterCitiesDestination(ChangeEventArgs e)
    {
        string input = e.Value?.ToString() ?? string.Empty;

        filterCitiesDestination = allCities
            .Where(c => c.city.Contains(input, StringComparison.OrdinalIgnoreCase))
            .Take(10)
            .ToList();
    }

    private void SelectCity(AddFlights city)
    {
        searchModel.Origin = city.city + " " + "(" + city.code + ")";
        filteredCities.Clear();
    }

    private void SelectCityDestination(AddFlights city)
    {
        searchModel.Destination = city.city + " " + "(" + city.code + ")";
        filterCitiesDestination.Clear();
    }
}