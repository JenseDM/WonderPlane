@page "/admincrud"

@using MudBlazor
@using System.Collections.Generic
@using WonderPlane.Client.Components

@using System.Net.Http.Json

@using System.Threading
@inject HttpClient httpClient

<PageTitle>Gestión de administradores</PageTitle>

<div class="contain poppins-light">
    <h1>Administradores</h1>

    <div class="table-admins">
        <!-- Barra de búsqueda y botón de crear nuevo usuario -->
<div class="create-button">
    <div class="button" onclick="@(() => showFormCreate())">Crear nuevo usuario</div>
    @* <MudTextField @bind-Value="_searchString"
                  Placeholder="Buscar por nombre, apellidos o email"
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  IconSize="Size.Medium"
                  AdornmentColor="Color.Info" /> *@

    <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
</div>

<MudTable Items="_admins"
          Striped="false"
          Hover="true"
          Bordered="false"
          RowsPerPage="5"
          ServerData="ServerReload"
          PagerPosition="MudBlazor.PagerPosition.Bottom">
    <HeaderContent>
        <MudTh>Avatar</MudTh>
        <MudTh>Documento de Identidad</MudTh>
        <MudTh>Nombre</MudTh>
        <MudTh>Apellidos</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Fecha de Nacimiento</MudTh>
        <MudTh>Acciones</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Avatar">
            <MudAvatar ImageSrc="@context.AvatarUrl" Size="Size.Medium" />
        </MudTd>
        <MudTd DataLabel="Documento de Identidad">@context.IdentityDocument</MudTd>
        <MudTd DataLabel="Nombre">@context.Name</MudTd>
        <MudTd DataLabel="Apellidos">@context.LastName</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Fecha de Nacimiento">@context.BirthDate.ToShortDateString()</MudTd>
        <MudTd DataLabel="Acciones">
            @* <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Info" OnClick="@(() => ViewDetails(context.Id))" /> *@
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => EditAdmin(context.Id))" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteAdmin(context.Id))" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
    </div>

    @if (_showCreateUser)
    {
        <!-- Crear usuario -->
        <div class="create-user-container">
            <span onclick="@(() => showFormCreate())" class="material-symbols-outlined">
                close
            </span>
            <CreateUser />
        </div>
    }
</div>

@code {
    // Variable para saber si mostrar o no el formulario de crear usuario
    private bool _showCreateUser = false;

    // Variable de búsqueda
    private string _searchString = "";

    // Modelo de administrador
    public class Admin
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public string? LastName { get; set; }
        public string? Email { get; set; }
        public string? IdentityDocument { get; set; } // Documento de identidad
        public DateTime BirthDate { get; set; } // Fecha de nacimiento
        public string? AvatarUrl { get; set; } // Campo para la URL del avatar
    }

    // Lista de administradores
    private List<Admin> _admins = new List<Admin>
    {
        new Admin { Id = 1, Name = "Jorge", LastName = "Mozquera", Email = "jorge.perez@example.com", IdentityDocument = "123456789", BirthDate = new DateTime(1980, 10, 15), AvatarUrl = "https://example.com/avatar1.png" },
        new Admin { Id = 2, Name = "Andrea", LastName = "Gonzalez", Email = "andrea.gonzalez@example.com", IdentityDocument = "987654321", BirthDate = new DateTime(1988, 05, 12), AvatarUrl = "https://example.com/avatar2.png" },
        new Admin { Id = 3, Name = "Carlos", LastName = "Perez", Email = "carlos.perez@example.com", IdentityDocument = "567891234", BirthDate = new DateTime(1995, 07, 23), AvatarUrl = "https://example.com/avatar3.png" },
    };

    // Filtro de la tabla
    private bool _adminFilter(Admin admin)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return (admin?.Name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (admin?.IdentityDocument?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false);
    }

    // Función para editar administrador
    private void EditAdmin(int id)
    {
        // Lógica para editar al administrador con el Id 'id'
    }

    // Función para borrar administrador
    private void DeleteAdmin(int id)
    {
        // Lógica para borrar al administrador con el Id 'id'
    }

    // Simulación de datos del servidor para el paginado
    private async Task<TableData<Admin>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        // Simulación de una operación asíncrona (p.ej., llamada a una API o consulta a una base de datos)
        await Task.Delay(1000); // Simulación de retraso asíncrono

        // Aplicar el filtro de búsqueda
        var filteredAdmins = _admins.Where(a => _adminFilter(a)).ToList();

        // Simular el paginado del servidor
        var pagedAdmins = filteredAdmins.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();

        // Devolver los datos paginados
        return new TableData<Admin>
            {
                Items = pagedAdmins,
                TotalItems = filteredAdmins.Count
            };
    }

    private void OnSearch(string text)
    {
       
    }

    // Función para mostrar el formulario de crear usuario
    private void showFormCreate()
    {
        _showCreateUser = !_showCreateUser;
    }
}
