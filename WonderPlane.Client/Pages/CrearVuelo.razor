@page "/CrearVuelo"
@layout SideBarLayout

@using WonderPlane.Shared;
@using WonderPlane.Client.Servicios;
@using System.ComponentModel.DataAnnotations;
@using MudBlazor;

@inject HttpClient Http;
@inject NavigationManager navigation;
@inject ISnackbar Snackbar;
@inject ImageUploadService ImageUploadService;
@inject IFlightService FlightService;

<div class="main-container poppins-light">
    
    <div class="register-container">
        <EditForm Model="newFlight" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />

            <h3>Crea Los Vuelos Disponibles</h3>

            <div class="form-container">

                <div class="form-container-left">
                    <div class="input">
                        <label class="form-label">Origen</label>
                        <select class="form-control" @bind="newFlight.Origin">
                            <option value="">Seleccione el Origen</option>
                            @if ( addFlights == null)
                            {
                                <p><em>Cargando...</em></p>
                            }
                            else
                            {
                                @foreach (var origin in addFlights)
                                {
                                    <option value="@origin.city (@origin.code) - @origin.country (@origin.country_code)">@origin.city (@origin.code) - @origin.country (@origin.country_code)</option>
                                }
                            }
                        </select>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.Origin)"></ValidationMessage></span>
                    </div>
                    <div class="input">
                        <label class="form-label">Fecha de Salida</label>
                        <input type="date" min="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control" @bind-value="newFlight.DepartureDate" />
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.DepartureDate)"></ValidationMessage></span>
                    </div>
                    <div class="input">
                        <label class="form-label">Hora de salida</label>
                        <MudTimePicker  @bind-Time="newFlight.DepartureTime" Color="Color.Tertiary" style="font-size: 0.8rem;color: #507687;padding:2px;" />
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.DepartureTime)"></ValidationMessage></span>
                    </div>
                    <div class="input">
                        <label class="form-label">Código de Vuelo</label>
                        <InputText class="form-control" @bind-Value="newFlight.FlightCode" style="font-size: 0.8rem;color: #507687"></InputText>
                        <button class="button-code" type="button" @onclick="GenerateRandomCode">Generar Código</button>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.FlightCode)"></ValidationMessage></span>
                    </div>
                </div>
                <div class="form-container-right">
                    <div class="input">
                        <label class="form-label">Destino</label>
                        <select class="form-control" @bind="newFlight.Destination">
                            <option value="">Seleccione el Origen</option>
                            @if (addFlights == null)
                            {
                                <p><em>Cargando...</em></p>
                            }
                            else
                            {
                                @foreach (var destination in addFlights)
                                {
                                    <option value="@destination.city (@destination.code) - @destination.country (@destination.country_code)">@destination.city (@destination.code) - @destination.country (@destination.country_code)</option>
                                }
                            }
                        </select>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.Destination)"></ValidationMessage></span>
                    </div>
                    <div class="input">
                        <label class="form-label">Fecha de Llegada</label>
                        <input type="date" min="@newFlight.DepartureDate.ToString("yyyy-MM-dd")" max="@newFlight.DepartureDate.AddDays(2).ToString("yyyy-MM-dd")" class="form-control" @bind-value="newFlight.ArriveDate" />
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.ArriveDate)"></ValidationMessage></span>
                    </div>
                    <div class="input">
                        <label class="form-label">Hora de Llegada</label>
                        <MudTimePicker @bind-Time="newFlight.ArriveTime" Color="Color.Tertiary" style="font-size: 0.8rem;color: #507687;padding:2px;" />
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.ArriveTime)"></ValidationMessage></span>
                    </div>
                    <div class="input">
                        <label class="form-label">Valor adicional por maleta</label>
                        <InputNumber class="form-control" @bind-Value="newFlight.BagPrice" style="font-size: 0.8rem;color: #507687;"></InputNumber>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.BagPrice)"></ValidationMessage></span>
                    </div>
                    <div class="input">
                        <label class="form-label">Vuelo Internacional</label>
                        <InputCheckbox style="width: 18px; height: 18px;" @bind-Value="newFlight.IsInternational"/>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.IsInternational)"></ValidationMessage></span>
                    </div>
                </div>
                <div class="form-container-right-2">
                    <div class="input">
                        <label class="form-label">Estado del Vuelo</label>
                        <InputText class="form-control" Disabled="true" @bind-Value="newFlight.FlightStatus" style="font-size: 0.8rem;color: #507687"></InputText>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.FlightStatus)"></ValidationMessage></span>
                    </div>
                    <div class="input">
                        <label class="form-label">Aplicar Promoción</label>
                        <InputNumber class="form-control" @bind-Value="newFlight.PromotionId" style="font-size: 0.8rem;color: #507687; width:100%"></InputNumber>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.PromotionId)"></ValidationMessage></span>
                    </div>
                    <div class="input">
                        <label class="form-label">Duración del Vuelo</label>
                        <InputText class="form-control" @bind-Value="newFlight.Duration" style="font-size: 0.8rem;color: #507687"></InputText>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.Duration)"></ValidationMessage></span>
                    </div>
                    <div class="input">
                        <label class="form-label">Subir Imagen del Vuelo</label>
                        <MudFileUpload T="IBrowserFile" FilesChanged="OnFileSelected">
                            <ActivatorContent>
                                <MudButton Variant="Variant.Filled" Style="margin-right: 10px; background-color:#41B3A2; color:white;border-radius:5px">
                                    Subir imagen
                                </MudButton>
                                <i class="fa-solid fa-upload fa-lg"></i>
                            </ActivatorContent>
                        </MudFileUpload>
                        @if (selectedFile != null)
                        {
                            <p>@selectedFile.Name</p>
                        }
                        
                    </div>
               </div>
                
            </div>
            <div class="form-button">
                <button class="submit-button" type="submit">Crear Vuelo</button>
            </div>
        </EditForm>
    </div>
     
</div>

@code {
    FlightDTO newFlight = new FlightDTO
    {
        Origin = string.Empty,
        Destination = string.Empty,
        DepartureDate = DateTime.Now,
        DepartureTime = TimeSpan.Zero,
        ArriveDate = DateTime.Now,
        ArriveTime = TimeSpan.Zero,
        FlightStatus = "Programado",
        IsInternational = false,
        BagPrice = 0,
        FlightCode = string.Empty,
        PromotionId = 0,
        Duration = string.Empty,
        Image = string.Empty,
    };

    private IBrowserFile? selectedFile; // Archivo de imagen seleccionado

    private AddFlights[]? addFlights;

    protected override async Task OnInitializedAsync()
    {
        addFlights = await Http.GetFromJsonAsync<AddFlights[]>("http://localhost:5195/sample-data/flights.json");

    }

    private void GenerateRandomCode()
    {
        Random random = new Random();
        int randomNumber = random.Next(1000, 10000); 
        newFlight.FlightCode = $"WP{randomNumber}";
    }

    private async Task OnValidSubmit()
    {
        try
        {
            // Para comparar Origen y Destino
            var originCode = newFlight.Origin.Split(' ')[1].Trim('(', ')'); 
            var destinationCode = newFlight.Destination.Split(' ')[1].Trim('(', ')');

            if (originCode == destinationCode)
            {
                Snackbar.Add("El origen y el destino no pueden ser iguales.", Severity.Error);
                return; 
            }

            // Verificar si se seleccionó un archivo de imagen
            if (selectedFile != null)
            {
                // Subir la imagen y obtener la URL
                var imageUrl = await ImageUploadService.UploadImage(selectedFile);
                Console.WriteLine(imageUrl);
                if (!string.IsNullOrEmpty(imageUrl))
                {
                    newFlight.Image = imageUrl; // Asignar la URL de la imagen al usuario
                                                // Snackbar.Add("La imagen se ha guardado correctamente.", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Error al subir la imagen.", Severity.Error);
                    return; // Detener el proceso si la imagen no se subió
                }
            }
            await FlightService.CreateFlight(newFlight);
            Snackbar.Add("Vuelo Registrado Correctamente", Severity.Success);
            newFlight = new FlightDTO
                {
                    Origin = string.Empty,
                    Destination = string.Empty,
                    DepartureDate = DateTime.Now,
                    DepartureTime = TimeSpan.Zero,
                    ArriveDate = DateTime.Now,
                    ArriveTime = TimeSpan.Zero,
                    FlightStatus = "Programado",
                    IsInternational = false,
                    BagPrice = 0,
                    FlightCode = string.Empty,
                    PromotionId = 0,
                    Duration = string.Empty,
                    Image = string.Empty,
                };

            selectedFile = null;
        }
        catch (ApplicationException ex)
        {
            Snackbar.Add($"Error al Registrar el Vuelo {ex.Message}", Severity.Error);
        }
    }
    IList<IBrowserFile> _files = new List<IBrowserFile>();
    private void UploadFiles(IBrowserFile file)
    {
        _files.Add(file);
    }

    private void OnFileSelected(IBrowserFile file)
    {
        if (file != null)
        {
            selectedFile = file; // Asignar el archivo seleccionado
            Snackbar.Add("La imagen se ha cargado correctamente.", Severity.Info);
        }
        else
        {
            Snackbar.Add("Error al cargar la imagen.", Severity.Error);
        }

    }


}