@page "/login"

<PageTitle>Iniciar Sesión</PageTitle>

@using WonderPlane.Shared;
@using WonderPlane.Client.Servicios;
@using System.ComponentModel.DataAnnotations;
@using MudBlazor;
@using Microsoft.AspNetCore.Components.Authorization

@inject IUserService UserService;
@inject NavigationManager navigation;
@inject HttpClient Http;
@inject CountryService CountryService;
@inject ISnackbar Snackbar;
@inject ImageUploadService ImageUploadService;
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider


<main class="main-container poppins-light">

    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320">
        <path fill="#fff" fill-opacity="1" d="M0,96L30,106.7C60,117,120,139,180,165.3C240,192,300,224,360,218.7C420,213,480,171,540,144C600,117,660,107,720,133.3C780,160,840,224,900,250.7C960,277,1020,267,1080,240C1140,213,1200,171,1260,160C1320,149,1380,171,1410,181.3L1440,192L1440,0L1410,0C1380,0,1320,0,1260,0C1200,0,1140,0,1080,0C1020,0,960,0,900,0C840,0,780,0,720,0C660,0,600,0,540,0C480,0,420,0,360,0C300,0,240,0,180,0C120,0,60,0,30,0L0,0Z"></path>
    </svg>
    <section class="login-container">

        <EditForm Model="User" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />

            <h1>Bienvenido</h1>

            <div class="form-container">

                <div class="input">
                    <label class="form-label">Email</label>
                    <InputText class="form-control" @bind-Value="User.Email" Placeholder="ejemplo@algo.com"></InputText>
                    <span class="small-validation-message"><ValidationMessage For="@(() => User.Email)"></ValidationMessage></span>
                </div>

                <div class="input">
                    <label class="form-label">Contraseña</label>
                    <input type="password" class="form-control" @bind-value="User.Password" />
                    <span class="small-validation-message"><ValidationMessage For="@(() => User.Password)"></ValidationMessage></span>

                    <label class="forgot-password"><a href="/recoverpassword">¿Olvidaste tu contraseña?</a></label>
                </div>

            </div>

            <div class="form-button">

                <button class="submit-button" type="submit">Ingresar</button>

                <ul>
                    <li>
                        <a>¿No tienes una cuenta?</a>
                        <a class="ingreso" href="/register"> Ingresa aqui</a>
                    </li>
                </ul>
            </div>
        </EditForm>

    </section>

    <svg class="svg-bottom" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320">
        <path fill="#fff" fill-opacity="1" d="M0,96L30,106.7C60,117,120,139,180,165.3C240,192,300,224,360,218.7C420,213,480,171,540,144C600,117,660,107,720,133.3C780,160,840,224,900,250.7C960,277,1020,267,1080,240C1140,213,1200,171,1260,160C1320,149,1380,171,1410,181.3L1440,192L1440,320L1410,320C1380,320,1320,320,1260,320C1200,320,1140,320,1080,320C1020,320,960,320,900,320C840,320,780,320,720,320C660,320,600,320,540,320C480,320,420,320,360,320C300,320,240,320,180,320C120,320,60,320,30,320L0,320Z"></path>
    </svg>
</main>

@code
{
    private UserLoginDto User = new UserLoginDto
        {
            Email = string.Empty,
            Password = string.Empty
        };

    private async Task OnValidSubmit()
    {
        try
        {
            Snackbar.Add("Iniciando sesión...", Severity.Info);
            var token = await UserService.LoginUser(User);
            Snackbar.Clear();
            Snackbar.Add("Inicio de sesión exitoso.", Severity.Success);

            await JS.InvokeVoidAsync("localStorage.setItem", "Token", token);

            // Forzar actualización del estado de autenticación
            var authStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
            await authStateProvider.GetAuthenticationStateAsync();

            // la página y la UI se actualicen correctamente
            StateHasChanged();
            navigation.NavigateTo("/");
        }
        catch (ApplicationException ex)
        {
            Snackbar.Clear();
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}



