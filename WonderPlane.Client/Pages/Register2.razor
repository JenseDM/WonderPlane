@page "/register2"
@using WonderPlane.Shared;
@using WonderPlane.Client.Servicios;
@using System.ComponentModel.DataAnnotations;
@using MudBlazor

@inject IUserService UserService;
@inject NavigationManager navigation;
@inject HttpClient Http;
@inject CountryService CountryService
@inject ISnackbar Snackbar

<EditForm Model="newUser" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="container-principal">
        <div class="container-secundario">
            <div class="header-container">
                <img src="images/logo4.svg" alt="logo" />
            </div>
            <div class="subtitle-register">
                <h1>Registrarse</h1>
            </div>
            <div class="register-container">
                <div class="register-container-1">
                    <div class="input">
                        <label class="form-label">Nombre Completo</label>
                        <InputText class="form-control" @bind-Value="newUser.Name"></InputText>
                        <ValidationMessage For="@(() => newUser.Name)"></ValidationMessage>
                    </div>

                    <div class="input">
                        <label class="form-label">Apellido</label>
                        <InputText class="form-control" @bind-Value="newUser.LastName"></InputText>
                        <ValidationMessage For="@(() => newUser.LastName)"></ValidationMessage>
                    </div>
                    <div class="input">
                        <label class="form-label">Usuario</label>
                        <InputText class="form-control" @bind-Value="newUser.UserName"></InputText>
                        <ValidationMessage For="@(() => newUser.UserName)"></ValidationMessage>
                    </div>
                    <div class="input">
                        <label class="form-label">Fecha de nacimiento</label>
                        <InputDate class="form-control" @bind-Value="newUser.BirthDate"></InputDate>
                        <ValidationMessage For="@(() => newUser.BirthDate)"></ValidationMessage>
                    </div>
                    <div class="input">
                        <MudTextField @bind-Value="newUser.Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" Margin="Margin.Dense" />
                    </div>
                     @* <div class="input">
                        <label class="form-label">Seleccionar Imagen de Perfil</label>
                        <InputFile OnChange="OnFileSelected"></InputFile>
                        <div style="margin-top: 10px;">
                            @if (!string.IsNullOrEmpty(newUser.Image))
                            {
                                <img src="@newUser.Image" alt="Imagen de perfil" style="width: 100px; height: 100px; border-radius: 50%;" />
                            }
                        </div> 
                    </div> *@
                </div>
                <div class="register-container-2">
                    <div class="input">
                        <label class="form-label">Email</label>
                        <InputText class="form-control" @bind-Value="newUser.Email"></InputText>
                        <ValidationMessage For="@(() => newUser.Email)"></ValidationMessage>
                    </div>
                    <div class="input">
                        <label class="form-label">Numero de telefono</label>
                        <InputText class="form-control" @bind-Value="newUser.PhoneNumber"></InputText>
                        <ValidationMessage For="@(() => newUser.PhoneNumber)"></ValidationMessage>
                    </div>

                    <div class="input">
                        <label class="form-label">Genero</label>
                        <InputSelect class="form-control" @bind-Value="newUser.Gender">
                            <option value="Male">Male</option>
                            <option value="Female">Female</option>
                            <option value="Other">Other</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => newUser.Gender)"></ValidationMessage>
                    </div>
                    <div class="input">
                        <label class="form-label">Dirección</label>
                        <InputText class="form-control" @bind-Value="newUser.Address"></InputText>
                        <ValidationMessage For="@(() => newUser.UserName)"></ValidationMessage>
                    </div>
                    <div class="input">
                        <label class="form-label">Lugar de nacimiento</label>
                        <InputSelect class="form-control" @bind-Value="newUser.Country">
                            <option value=""> Seleccione un país</option>
                            @foreach (var country in countries)
                            {
                                <option value="@country">@country</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => selectedCountry)"></ValidationMessage>
                    </div>
                </div>
            </div>
            <button class="register" type="submit">
                Registrar
            </button>
            <ul>
                <li>
                    <a>¿Ya tienes una cuenta?</a>
                    <a class="ingreso" href="/"> Ingresa aqui</a>
                </li>
            </ul>
        </div>
    </div>
</EditForm>

@code {
    RegisterDTO newUser = new RegisterDTO
        {
            UserName = string.Empty,
            Name = string.Empty,
            LastName = string.Empty,
            BirthDate = DateTime.Now,
            Email = string.Empty,
            Address = string.Empty,
            Country = string.Empty,
            Password = string.Empty,
            Gender = UserGender.Other,
            PhoneNumber = string.Empty,
        };

    private List<string> countries = new List<string>(); // Lista de países
    private string selectedCountry = ""; // País seleccionado
    private bool isImageUploading = false;

    protected override async Task OnInitializedAsync()
    {
        // Obtener lista de países al cargar el componente
        countries = await CountryService.GetCountriesAsync();
    }

    private async Task OnValidSubmit()
    {
        if (isImageUploading)
        {
            Snackbar.Add("Por favor espera mientras se sube la imagen.", Severity.Warning);
            return;
        }

        try
        {
            // Llamada al servicio para registrar al nuevo usuario
            await UserService.CreateUser(newUser);

            // Mostrar el mensaje de éxito usando Snackbar
            Snackbar.Add("Registro realizado con éxito.", Severity.Success);

            // Esperar unos segundos y redirigir
            await Task.Delay(3000);
            navigation.NavigateTo("/login");
        }
        catch (ApplicationException ex)
        {
            // Console.WriteLine($"Error al registrar usuario: {ex.Message}");
            Snackbar.Add($"Error al registrar usuario: {ex.Message}", Severity.Error);
        }
    }

    

    public required string Password { get; set; }

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}
