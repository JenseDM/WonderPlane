@page "/register2"
@using WonderPlane.Shared;
@using WonderPlane.Client.Servicios;
@using System.ComponentModel.DataAnnotations;

@inject IUserService UserService;
@inject NavigationManager navigation;
@inject HttpClient Http;

<EditForm Model="newUser" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="container-principal">
        <div class="container-secundario">
            <div class="header-container">
                <img src="images/logo4.svg" alt="logo" />
            </div>
            <div class="subtitle-register">
                <h1>Registrarse</h1>
            </div>
            <div class="register-container">
                <div class="register-container-1">
                    <div class="input">
                        <label class="form-label">Nombre Completo</label>
                        <InputText class="form-control" @bind-Value="newUser.Name"></InputText>
                        <ValidationMessage For="@(() => newUser.Name)"></ValidationMessage>
                    </div>

                    <div class="input">
                        <label class="form-label">Apellido</label>
                        <InputText class="form-control" @bind-Value="newUser.LastName"></InputText>
                        <ValidationMessage For="@(() => newUser.LastName)"></ValidationMessage>
                    </div>
                    <div class="input">
                        <label class="form-label">Usuario</label>
                        <InputText class="form-control" @bind-Value="newUser.UserName"></InputText>
                        <ValidationMessage For="@(() => newUser.UserName)"></ValidationMessage>
                    </div>
                    <div class="input">
                        <label class="form-label">Fecha de nacimiento</label>
                        <InputDate class="form-control" @bind-Value="newUser.BirthDate"></InputDate>
                        <ValidationMessage For="@(() => newUser.BirthDate)"></ValidationMessage>
                    </div>
                </div>
                <div class="register-container-2">
                    <div class="input">
                        <label class="form-label">Email</label>
                        <InputText class="form-control" @bind-Value="newUser.Email"></InputText>
                        <ValidationMessage For="@(() => newUser.Email)"></ValidationMessage>
                    </div>
                    <div class="input">
                        <label class="form-label">Numero de telefono</label>
                        <InputText class="form-control" @bind-Value="newUser.PhoneNumber"></InputText>
                        <ValidationMessage For="@(() => newUser.PhoneNumber)"></ValidationMessage>
                    </div>

                    <div class="input">
                        <label class="form-label">Genero</label>
                        <InputSelect class="form-control" @bind-Value="newUser.Gender">
                            <option value="Male">Male</option>
                            <option value="Female">Female</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => newUser.Gender)"></ValidationMessage>
                    </div>
                    <div class="input">
                        <label for="password">Contraseña</label>
                        <InputText class="form-control" @bind-Value="newUser.Password" InputType="password"></InputText>
                        <ValidationMessage For="@(() => newUser.Password)"></ValidationMessage>
                    </div>
                     
                </div>
                
            </div>
            <button class="register" type="submit">
                Registrar
            </button>
            <ul>
                <li>
                    <a>¿Ya tienes una cuenta?</a>
                    <a class="ingreso" href="login"> Ingresa aqui</a>
                </li>
            </ul>
        </div>
    </div>
</EditForm>


@code {
    RegisterDTO newUser = new RegisterDTO
        {
            UserName = string.Empty,
            Name = string.Empty,
            LastName = string.Empty,
            BirthDate = DateTime.Now,
            Email = string.Empty,
            Password = string.Empty,
            Gender = string.Empty,
            PhoneNumber = string.Empty,
        };

    private async Task OnValidSubmit()
    {
    try
        {
            // Llamada al servicio para registrar al nuevo usuario
            await UserService.CreateUser(newUser);

            // Redirigir si el registro es exitoso
            navigation.NavigateTo("/home");
        }
        catch (ApplicationException ex)
        {
            // Manejar el error, por ejemplo, mostrando un mensaje
            Console.WriteLine($"Error al registrar usuario: {ex.Message}");
        }
    }

    public string Password { get; set; }

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }


}