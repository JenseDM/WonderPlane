@page "/recoverpassword"

<PageTitle>Recuperar contraseña</PageTitle>

@using WonderPlane.Shared;
@using WonderPlane.Client.Servicios;
@using System.ComponentModel.DataAnnotations;
@using MudBlazor;
@using Microsoft.AspNetCore.Components.Authorization;

@inject IUserService UserService;
@inject NavigationManager Navigation;
@inject HttpClient Http;
@inject CountryService CountryService;
@inject ISnackbar Snackbar;
@inject ImageUploadService ImageUploadService;
@inject IJSRuntime JS;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<main class="main-container poppins-light">
    <section class="login-container">
       
        @if (!IsCodeVerify)
        {
            <EditForm Model="Recover" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />

                <a href="/Login"><span class="material-symbols-outlined">chevron_left</span></a>
                <h1>Recuperar contraseña</h1>

                <label>Ingresa tu correo electrónico para recuperar tu contraseña.</label>

                <div class="form-container">
                    @if (!IsCodeSent)
                    {
                        <div class="input">
                            <label class="form-label">Email</label>
                            <InputText class="form-control" @bind-Value="Recover.Email" Placeholder="ejemplo@algo.com"></InputText>
                            <span class="small-validation-message"><ValidationMessage For="@(() => Recover.Email)"></ValidationMessage></span>
                        </div>
                    }
                    else
                    {
                        <div class="input">
                            <label class="form-label">Escribe el código recibido</label>
                            <InputText class="form-control" @bind-Value="Recover.InputCode" Placeholder="Código de 6 dígitos"></InputText>
                            <span class="small-validation-message"><ValidationMessage For="@(() => Recover.InputCode)"></ValidationMessage></span>

                            <label class="form-label">El código expira en: @timeLeft segundos</label>
                        </div>

                    }

                </div>

                <div class="form-button">
                    @if (!IsCodeSent)
                    {
                        <button class="submit-button" type="submit">Enviar</button>
                    }
                    else
                    {
                        <button class="submit-button" @onclick="VerifyCode">Verificar Código</button>
                        <label class="ingreso" @onclick="ResendCode" disabled="@isResendDisabled">Reenviar código</label>
                    }

                    <ul>
                        <li>
                            <a>¿No tienes una cuenta?</a>
                            <a class="ingreso" href="/register"> Ingresa aqui</a>
                        </li>
                    </ul>
                </div>
            </EditForm>
        }
        else
        {
            <EditForm Model="UpdatePassword" OnValidSubmit="ChangePassword">
                <DataAnnotationsValidator />

                <a href="/Login"><span class="material-symbols-outlined">chevron_left</span></a>
                <h1>Cambiar contraseña</h1>

                <label>Cambia tu contraseña y luego vuelve a iniciar sesión.</label>

                <div class="form-container">

                    <div class="input">
                        <label class="form-label">Nueva contraseña</label>
                        <input type="password" class="form-control" @bind-value="UpdatePassword.NewPassword" />
                        <span class="small-validation-message"><ValidationMessage For="@(() => UpdatePassword.NewPassword)"></ValidationMessage></span>
                    </div>

                    <div class="input">
                        <label class="form-label">Confirmar nueva contraseña</label>
                        <input type="password" class="form-control" @bind-value="UpdatePassword.ConfirmNewPassword" />
                        <span class="small-validation-message"><ValidationMessage For="@(() => UpdatePassword.ConfirmNewPassword)"></ValidationMessage></span>
                    </div>
                    
                </div>

                <div class="form-button">

                    <button class="submit-button" type="submit">Cambiar</button>
                    <a class="ingreso" href="/Login"> Cancelar</a>

                    <ul>
                        <li>
                            <a>¿No tienes una cuenta?</a>
                            <a class="ingreso" href="/register"> Ingresa aqui</a>
                        </li>
                    </ul>
                </div>
            </EditForm>
        }
    </section>

    <section class="info-container">
        <img src="img/Wlogo.png" alt="Alternate Text" /><br />
        <h2>¡Inicia sesión en tu cuenta!</h2>
        <p>Bienvenido de nuevo a nuestra comunidad. Inicia sesión para acceder a tus servicios personalizados y aprovechar al máximo todas las ventajas que ofrecemos. Si aún no tienes una cuenta, no dudes en registrarte y unirte a nosotros. ¡Te esperamos!</p>
    </section>
</main>

@code {

    private int userId;
    private string recoveryCode = string.Empty;
    private bool IsCodeSent = false;
    private bool IsCodeVerify = false;
    private int timeLeft = 300; // 5 minutos
    private bool isTimerRunning = false;
    private bool isResendDisabled = false;
    private System.Timers.Timer? timer;

    private RecoverPasswordDto Recover = new RecoverPasswordDto
        {
            Email = string.Empty,
            InputCode = string.Empty
        };

    private UpdatePasswordDto UpdatePassword = new UpdatePasswordDto
        {
            Id = 0,
            NewPassword = string.Empty,
            ConfirmNewPassword = string.Empty
        };


    // Función para iniciar el temporizador
    private void StartTimer()
    {
        if (timer == null)
        {
            timer = new System.Timers.Timer(1000); // 1 segundo
            timer.Elapsed += TimerElapsed;
        }

        isTimerRunning = true;
        timer.Start();
    }

    private void TimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        if (timeLeft > 0)
        {
            timeLeft--;
            InvokeAsync(StateHasChanged); // Actualiza la UI
        }
        else
        {
            timer?.Stop();
            isTimerRunning = false;
            Recover.InputCode = string.Empty;
            IsCodeSent = false;
            timeLeft = 300;
            Snackbar.Add("El código ha expirado. Por favor, solicita uno nuevo.", Severity.Warning);
            InvokeAsync(StateHasChanged); // Actualiza la UI
        }
    }

    // Detener el temporizador cuando se verifica el código
    private void StopTimer()
    {
        timer?.Stop();
        isTimerRunning = false;
        timeLeft = 300; // Reinicia el tiempo para la próxima vez
    }


    private async Task OnValidSubmit()
    {
        await SendRecoveryCode();
    }

    // Enviar código de recuperación
    private async Task SendRecoveryCode()
    {
        try
        {
            Snackbar.Add("Procesando solicitud...", Severity.Info);
            // Verificar que el usuario existe y obtener su ID
            var response = await Http.GetAsync($"api/user/email/{Uri.EscapeDataString(Recover.Email)}");

            if (response.IsSuccessStatusCode)
            {
                userId = await response.Content.ReadFromJsonAsync<int>();

                // Generar un código de 6 dígitos
                var random = new Random();
                recoveryCode = random.Next(100000, 999999).ToString();

                // Crear el cuerpo del correo
                var emailDto = new EmailDto
                    {
                        To = Recover.Email,
                        Subject = "Recuperación de contraseña",
                        Body = $"Tu código de recuperación es: {recoveryCode}"
                    };

                // Enviar el correo utilizando el endpoint de envío de correos
                var emailResponse = await Http.PostAsJsonAsync("api/sendemail", emailDto);

                if (emailResponse.IsSuccessStatusCode)
                {
                    Snackbar.Clear();
                    Snackbar.Add("Código de recuperación enviado exitosamente.", Severity.Success);
                    ChangeState();
                    StartTimer();
                }
                else
                {
                    Snackbar.Clear();
                    Snackbar.Add("Error al enviar el código de recuperación.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Clear();
                Snackbar.Add("El usuario no fue encontrado.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al procesar la solicitud: {ex.Message}", Severity.Error);
        }
    }

    private async Task ResendCode()
    {
        isResendDisabled = true;
        await SendRecoveryCode();

        // Deshabilitar el botón durante 10 segundos para evitar múltiples clics.
        await Task.Delay(10000);
        isResendDisabled = false;
    }

    // Verificación del código ingresado por el usuario

    private void VerifyCode()
    {
        try
        {
            // Compara el código ingresado por el usuario con el código generado
            if (Recover.InputCode == recoveryCode)
            {
                Snackbar.Add("El código es correcto. Procede con la recuperación de la contraseña.", Severity.Success);
                StopTimer();
                ChangeStateCodeVerify();

            }
            else
            {
                Snackbar.Add("El código ingresado es incorrecto. Por favor, intenta nuevamente.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al verificar el código: {ex.Message}", Severity.Error);
        }
    }

    // Cambio de la contraseña

    private async Task ChangePassword()
    {
        try
        {
            if (UpdatePassword.NewPassword != UpdatePassword.ConfirmNewPassword)
            {
                Snackbar.Add("Las contraseñas no coinciden. Por favor, verifica.", Severity.Warning);
                return;
            }

            // Almacenamos el id del usuario que está solicitando el cambio de contraseña para actualizar la base de datos
            UpdatePassword.Id = userId;

            // Hacer la llamada HTTP PUT para cambiar la contraseña
            var response = await Http.PutAsJsonAsync("api/user/resetpassword", UpdatePassword);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Contraseña actualizada correctamente. Por favor, inicia sesión.", Severity.Success);
                Navigation.NavigateTo("/login");
            }
            else
            {
                var errorResponse = await response.Content.ReadFromJsonAsync<ResponseAPI<string>>();
                Snackbar.Add(errorResponse?.Mensaje ?? "Error al actualizar la contraseña.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cambiar la contraseña: {ex.Message}", Severity.Error);
        }
    }

    // Funciones para mostrar inputs necesarios

    private void ChangeState()
    {
        if (!IsCodeSent)
        {
            IsCodeSent = !IsCodeSent;
        }
    }

    private void ChangeStateCodeVerify()
    {
        IsCodeVerify = true;
        IsCodeSent = false;

    }

    // No olvides liberar el temporizador al destruir el componente
    public void Dispose()
    {
        timer?.Dispose();
    }
}
