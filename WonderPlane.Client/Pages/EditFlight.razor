@page "/manage-flights/flight/{idFlight:int}"

@using WonderPlane.Shared;
@using WonderPlane.Client.Services;
@using WonderPlane.Client.Utils
@using System.ComponentModel.DataAnnotations;
@using MudBlazor;

@inject NavigationManager navigation;
@inject ISnackbar Snackbar;
@inject IFlightService FlightService;

<AsideMenu />
<div class="main-container poppins-light">

    <div class="register-container">
        <EditForm Model="newFlight" OnValidSubmit="OnValidSubmit" style="display:flex;flex-direction: column;justify-content: center;width:80%">
            <DataAnnotationsValidator />
            <div class="tittle">
                <MudTooltip Text="Volver"><MudIconButton Icon="material-symbols-outlined/arrow_back" Color="Color.Info" OnClick="@(() => navigation.NavigateTo("/manage-flights"))" /></MudTooltip>
                <h4>Crea Los Vuelos Disponibles</h4>
            </div>
            <div class="input-check">
                <label class="form-label">Tipo de Vuelo:</label>
                <label class="label-type" style="font-weight: 700; font-size: 1rem;">
                    @(newFlight.IsInternational ? "Internacional" : "Nacional")
                </label>
                <span class="small-validation-message">
                    <ValidationMessage For="@(() => newFlight.IsInternational)"></ValidationMessage>
                </span>
                @if (newFlight.HasPromotion)
                {
                    <MudSwitch @bind-Value="newFlight.HasPromotion" @onchange="CalculatePromotion" Color="Color.Secondary" Label="Retirar Promoción" />
                }
                else
                {
                    <MudSwitch @bind-Value="newFlight.HasPromotion" @onchange="CalculatePromotion" Color="Color.Secondary" Label="Aplicar Promoción" />
                }
                
                
            </div>
            @if (newFlight.HasPromotion)
            {
                <div class="container-promotion">
                    <div class="input">
                        <label class="form-label">Código de Promoción</label>
                        <InputText class="form-control" @bind-Value="newFlight.CodePromotion" @onchange="CalculatePromotion" style="font-size: 0.8rem;color: #507687"></InputText>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.CodePromotion)"></ValidationMessage></span>
                    </div>
                    <div class="input">
                        <label class="form-label">Descuento</label>
                        <div class="input-group">
                            <InputNumber class="form-control" @bind-Value="newFlight.DiscountPercentage" style="font-size: 0.8rem; color: #507687;" />
                            <span class="input-group-text">%</span>
                        </div>
                        <span class="small-validation-message">
                            <ValidationMessage For="@(() => newFlight.DiscountPercentage)" />
                        </span>
                    </div>
                    <div class="input">
                        <label class="form-label">Descripción de la Promoción</label>
                        <InputText class="form-control" @bind-Value="newFlight.PromotionDescription" style="font-size: 0.8rem;color: #507687"></InputText>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.PromotionDescription)"></ValidationMessage></span>
                    </div>
                </div>

            }
            <div class="form-container">

                <div class="form-container-left">
                    <div class="input">
                        <label class="form-label">Origen</label>
                        <InputText class="form-control" @bind-Value="newFlight.Origin" style="font-size: 0.8rem;color: #507687" disabled="true"></InputText>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.Origin)"></ValidationMessage></span>
                    </div>
                    <div class="input">
                        <label class="form-label">Destino</label>
                        <InputText class="form-control" @bind-Value="newFlight.Destination" style="font-size: 0.8rem;color: #507687" disabled="true"></InputText>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.Destination)"></ValidationMessage></span>
                    </div>
                    <div class="input">
                        <label class="form-label">Fecha de Salida</label>
                        <input type="date" min="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control" @bind-value="newFlight.DepartureDate"/>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.DepartureDate)"></ValidationMessage></span>
                    </div>
                    <div class="input">
                        <label class="form-label">Hora de salida</label>
                        <MudTimePicker Time="@_departureTime" TimeChanged=@(time => OnArriveTimeChanged(time)) Color="Color.Info" style="font-size: 0.8rem;color: #507687;padding:2px;" />
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.DepartureTime)"></ValidationMessage></span>
                    </div>
                    
                </div>
                <div class="form-container-right">
                    <div class="input">
                        <label class="form-label">Código de Vuelo</label>
                        <InputText class="form-control" @bind-Value="newFlight.FlightCode" style="font-size: 0.8rem;color: #507687" disabled="true"></InputText>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.FlightCode)"></ValidationMessage></span>
                    </div>
                    <div class="input">
                        <label class="form-label">Duración del Vuelo</label>
                        <div style="position: relative;">
                            <input type="text" class="form-control"
                                   value="@FlightDuration.FormatDuration(newFlight.Duration)"
                                   style="font-size: 0.8rem; color: #507687;"
                                   disabled="true" />
                        </div>
                        <span class="small-validation-message">
                            <ValidationMessage For="@(() => newFlight.Duration)" />
                        </span>
                    </div>
                    <div class="input">
                        <label class="form-label">Fecha de Llegada</label>
                        <input type="date" min="@newFlight.DepartureDate.ToString("yyyy-MM-dd")" max="@newFlight.DepartureDate.AddDays(2).ToString("yyyy-MM-dd")" class="form-control" @bind-value="newFlight.ArriveDate" disabled="true" />
                        <span class="small-validation-message"><ValidationMessage For="@(() => newFlight.ArriveDate)"></ValidationMessage></span>
                    </div>
                    <div class="input">
                        <label class="form-label">Hora de llegada "Col"</label>
                        <div style="position: relative;">
                            <input type="text" class="form-control"
                                   value="@(_arriveTime.HasValue ? $"{_arriveTime.Value.Hours:D2}:{_arriveTime.Value.Minutes:D2}" : "")"
                                   style="font-size: 0.8rem; color: #507687;"
                                   disabled="true" />
                        </div>
                        <span class="small-validation-message">
                            <ValidationMessage For="@(() => newFlight.ArriveTime)" />
                        </span>
                    </div>
                </div>
                <div class="form-container-right-2">
                    <div class="input">
                        <label class="form-label">Precio Primera Clase "Cop"</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span> <!-- Icono de dólar -->
                            <InputNumber class="form-control" @bind-Value="newFlight.FirstClassPricePromotion" @onchange="CalculatePromotion" style="font-size: 0.8rem; color: #507687;" />
                        </div>
                        <span class="small-validation-message">
                            <ValidationMessage For="@(() => newFlight.FirstClassPricePromotion)" />
                        </span>
                    </div>
                    <div class="input">
                        <label class="form-label">Precio Clase Economica "Cop"</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span> <!-- Icono de dólar -->
                            <InputNumber class="form-control" @bind-Value="newFlight.EconomicClassPricePromotion" @onchange="CalculatePromotion" style="font-size: 0.8rem; color: #507687;" />
                        </div>
                        <span class="small-validation-message">
                            <ValidationMessage For="@(() => newFlight.EconomicClassPricePromotion)" />
                        </span>
                    </div>
                    <div class="input">
                        <label class="form-label">Valor adicional por maleta "Cop"</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span> <!-- Icono de dólar -->
                            <InputNumber class="form-control" @bind-Value="newFlight.BagPrice" style="font-size: 0.8rem; color: #507687;" />
                        </div>
                        <span class="small-validation-message">
                            <ValidationMessage For="@(() => newFlight.BagPrice)" />
                        </span>
                    </div>
                </div>
            </div>
            <div class="form-button">
                <button class="submit-button" type="submit">Actualizar Vuelo</button>
            </div>
        </EditForm>
    </div>

</div>

@code {
    [Parameter]
    public int? idFlight { get; set; }

    FlightDTO newFlight = new FlightDTO
        {
            Origin = string.Empty,
            Destination = string.Empty,
            DepartureDate = DateTime.Now,
            DepartureTime = "00:00",
            ArriveDate = DateTime.Now,
            ArriveTime = "00:00",
            FirstClassPrice = 0,
            FirstClassPricePromotion = 0,
            IsInternational = false,
            FlightStatus = 0,
            BagPrice = 0,
            FlightCode = string.Empty,
            Duration = 0,
            EconomicClassPrice = 0,
            EconomicClassPricePromotion = 0,
            HasPromotion = false,
            CodePromotion = string.Empty,
            DiscountPercentage = 0,
            PromotionDescription = string.Empty
        };
    private TimeSpan? _departureTime;
    private TimeSpan? _arriveTime;

    protected override async Task OnInitializedAsync()
    {
        if (idFlight.HasValue)
        {
            //Para cargar datos del vuelo existente
            newFlight = await FlightService.SearchFlight(idFlight.Value);
            _departureTime = TimeSpan.Parse(newFlight.DepartureTime);
            _arriveTime = TimeSpan.Parse(newFlight.ArriveTime);
            if(newFlight.HasPromotion == false)
            {
                newFlight.FirstClassPricePromotion = newFlight.FirstClassPrice;
                newFlight.EconomicClassPricePromotion = newFlight.EconomicClassPrice;
            }
        }
    }
    private async Task OnValidSubmit()
    {
        try
        {
            if (_departureTime.HasValue)
            {
                var currentTime = DateTime.Now.TimeOfDay;
                var currentDate = DateTime.Now.Date;
                var departureDate = newFlight.DepartureDate.Date;
                if ((departureDate == currentDate) && (_departureTime.HasValue && _departureTime.Value < currentTime))
                {
                    Snackbar.Add("La hora de salida no puede ser anterior a la hora actual.", Severity.Error);
                    return;
                }
                double duration = (_departureTime - currentTime)?.TotalHours ?? 0;

                if (newFlight.IsInternational)
                {
                    if ((departureDate == currentDate) && duration < 3)
                    {
                        Snackbar.Add("La hora de salida debe ser al menos 3 horas después de la hora actual.", Severity.Error);
                        return;
                    }
                }
                else
                {
                    if ((departureDate == currentDate) && duration < 1)
                    {
                        Snackbar.Add("La hora de salida debe ser al menos 1 hora después de la hora actual.", Severity.Error);
                        return;
                    }
                }
            }

            if (idFlight.HasValue)
            {
                CalculatePromotion();
                await FlightService.UpdateFlight(idFlight.Value, newFlight);
                Snackbar.Add("Vuelo Actualizado Correctamente", Severity.Success);
                navigation.NavigateTo("/manage-flights");
            }
        }
        catch (ApplicationException ex)
        {
            Snackbar.Add($"Error al Registrar/Actualizar el Vuelo: {ex.Message}", Severity.Error);
        }
    }

    private void OnArriveTimeChanged(TimeSpan? newTime)
    {
        _departureTime = newTime ?? TimeSpan.Zero;
        if (newTime.HasValue)
        {
            newFlight.DepartureTime = $"{_departureTime.Value.Hours:D2}:{_departureTime.Value.Minutes:D2}";
            var resultadoLlegada = CalcularFechaHoraLlegada(newFlight.DepartureDate, _departureTime);
            newFlight.ArriveDate = resultadoLlegada.FechaLlegada;
            _arriveTime = resultadoLlegada.HoraLlegada;
        }
        else
        {
            _arriveTime = TimeSpan.Zero;
        }
    }

    private (DateTime FechaLlegada, TimeSpan HoraLlegada) CalcularFechaHoraLlegada(DateTime fechaSalida, TimeSpan? horaSalida)
    {
        int durationMinutes = newFlight.Duration;
        var momentoSalida = fechaSalida.Date.Add(horaSalida ?? TimeSpan.Zero);
        var momentoLlegada = momentoSalida.AddMinutes(durationMinutes);
        return (momentoLlegada.Date, momentoLlegada.TimeOfDay);
    }

    private void CalculatePromotion()
    {
        if (newFlight.HasPromotion)
        {
            newFlight.FirstClassPricePromotion = (int)(newFlight.FirstClassPrice * (1 - (newFlight.DiscountPercentage ?? 0) / 100.0));
            newFlight.EconomicClassPricePromotion = (int)(newFlight.EconomicClassPrice * (1 - (newFlight.DiscountPercentage ?? 0) / 100.0));
        }
        else
        {
            newFlight.FirstClassPricePromotion = newFlight.FirstClassPrice;
            newFlight.EconomicClassPricePromotion = newFlight.EconomicClassPrice;
            newFlight.CodePromotion = string.Empty;
            newFlight.DiscountPercentage = 0;
            newFlight.PromotionDescription = string.Empty;
        }

    }
}