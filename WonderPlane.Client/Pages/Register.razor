@page "/register"

<PageTitle>Registro</PageTitle>

@using WonderPlane.Shared;
@using WonderPlane.Client.Servicios;
@using System.ComponentModel.DataAnnotations;
@using MudBlazor;

@inject IUserService UserService;
@inject NavigationManager navigation;
@inject HttpClient Http;
@inject CountryService CountryService;
@inject ISnackbar Snackbar;
@inject ImageUploadService ImageUploadService

<div class="main-container poppins-light">
    
    <div class="register-container">
        <EditForm Model="newUser" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />

            <h1>¡Únete ahora!</h1>

            <div class="form-container">

                <div class="form-container-left">
                    <div class="input">
                        <label class="form-label">Nombres</label>
                        <InputText class="form-control" @bind-Value="newUser.Name"></InputText>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newUser.Name)"></ValidationMessage></span>
                    </div>

                    <div class="input">
                        <label class="form-label">Apellidos</label>
                        <InputText class="form-control" @bind-Value="newUser.LastName"></InputText>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newUser.LastName)"></ValidationMessage></span>
                    </div>

                    <div class="input">
                        <label class="form-label">Numero de telefono</label>
                        @* <input type="tel" class="form-control" @bind-value="newUser.PhoneNumber" @bind-value:event="oninput" /> *@
                        <InputText class="form-control" @bind-Value="newUser.PhoneNumber"></InputText>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newUser.PhoneNumber)"></ValidationMessage></span>
                    </div>

                    <div class="input">
                        <label class="form-label">Genero</label>
                        <select class="form-control" @bind="newUser.Gender">
                            <option value="Male">Masculino</option>
                            <option value="Female">Femenino</option>
                            <option value="Prefiero no decirlo">Prefiero no decirlo</option>
                            <option value="Other">Otro</option>
                        </select>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newUser.Gender)"></ValidationMessage></span>
                    </div>

                    <div class="input">
                        <label class="form-label">Dirección</label>
                        <InputText class="form-control" @bind-Value="newUser.Address" ></InputText>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newUser.Address)"></ValidationMessage></span>
                    </div>

                    <div class="input">
                        <label class="form-label">Lugar de nacimiento</label>
                        <select class="form-control" @bind="newUser.Country">
                            <option value="">Seleccione un país</option>
                            @foreach (var country in countries)
                            {
                                <option value="@country">@country</option>
                            }
                        </select>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newUser.Country)"></ValidationMessage></span>
                    </div>
                </div>

                <div class="form-container-right">
                    <div class="input">
                        <label class="form-label">Fecha de nacimiento</label>
                        <input type="date" min="1940-01-01" max="2006-12-31" class="form-control" @bind-value="newUser.BirthDate" />
                        <span class="small-validation-message"><ValidationMessage For="@(() => newUser.BirthDate)"></ValidationMessage></span>
                    </div>

                    <div class="input">
                        <label class="form-label">Email</label>
                        <InputText class="form-control" @bind-Value="newUser.Email" Placeholder="example@domain.com"></InputText>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newUser.Email)"></ValidationMessage></span>
                    </div>

                    <div class="input">
                        <label class="form-label">Usuario</label>
                        <InputText class="form-control" @bind-Value="newUser.UserName"></InputText>
                        <span class="small-validation-message"><ValidationMessage For="@(() => newUser.UserName)"></ValidationMessage></span>
                    </div>

                    <div class="input">
                        <label class="form-label">Contraseña</label>
                        <input type="password" class="form-control" @bind-value="newUser.Password" />
                        <span class="small-validation-message"><ValidationMessage For="@(() => newUser.Password)"></ValidationMessage></span>
                    </div>

                    <div class="input">
                        <label class="form-label">Confirmar Contraseña</label>
                        <input type="password" class="form-control" @bind-value="newUser.ConfirmPassword" />
                        <span class="small-validation-message"><ValidationMessage For="@(() => newUser.ConfirmPassword)"></ValidationMessage></span>
                    </div>

                    <div class="input">
                        <label class="form-label" >Seleccionar Imagen de Perfi</label>
                        @* <InputFile onshow="false" OnChange="OnFileSelected"></InputFile> *@
                        <MudFileUpload T="IBrowserFile" FilesChanged="OnFileSelected">
                            <ActivatorContent>
                                <MudButton Variant="Variant.Filled" Color="Color.Info">
                                    Subir imagen
                                </MudButton>
                            </ActivatorContent>
                        </MudFileUpload>
                        @* Mostrar el nombre del archivo seleccionado *@
                        @if (selectedFile != null)
                        {
                            <p>@selectedFile.Name</p>
                        }
                        else
                        {
                            <p>No file</p>
                        }
                       
                    </div> 
                </div>

            </div>

            <div class="form-button">
                <button class="submit-button" type="submit">Registrar</button>
                @* <MudCheckBox @bind-Value="Basic_CheckBox2" Size="Size.Small" Color="Color.Info" UncheckedColor="Color.Default"><a class="ingreso" href="#">Terminos y condiciones.</a></MudCheckBox> *@
                <ul>
                    <li>
                        <a>¿Ya tienes una cuenta?</a>
                        <a class="ingreso" href="/login"> Ingresa aqui</a>
                    </li>
                </ul>
            </div>
        </EditForm>
    </div>
    
    <div class="info-container">
        <img src="img/WLogo.png" /><br />
        <h1>¡Únete a Nuestra Comunidad!</h1>
        <p>En nuestro formulario de registro, te invitamos a ser parte de una experiencia única. Al completar tu inscripción, podrás acceder a una variedad de servicios y beneficios diseñados especialmente para ti. Solo necesitas proporcionarnos algunos datos básicos, y en pocos minutos estarás listo para disfrutar de todo lo que ofrecemos. Tu información será tratada con la máxima seguridad y confidencialidad. ¡Esperamos verte pronto!</p>
    </div>
     
</div>

@code {

    // public bool Basic_CheckBox2 { get; set; } = false;

    RegisterDTO newUser = new RegisterDTO
        {
            UserName = string.Empty,
            Name = string.Empty,
            LastName = string.Empty,
            BirthDate = DateTime.Now,
            Email = string.Empty,
            Address = string.Empty,
            Country = string.Empty,
            Password = string.Empty,
            ConfirmPassword = string.Empty,
            Gender = string.Empty,
            PhoneNumber = string.Empty,
            Image = string.Empty
        };

    private List<string> countries = new List<string>(); // Lista de países
    //private string selectedCountry = ""; País seleccionado
    private IBrowserFile? selectedFile; // Archivo de imagen seleccionado
    private bool isProcessing = false; // Indicador de proceso en curso

    protected override async Task OnInitializedAsync()
    {
        countries = await CountryService.GetCountriesAsync();
    }

    private async Task OnValidSubmit()
    {
        try
        {
            isProcessing = true; // Indicar que se está procesando la solicitud
            Snackbar.Add("Procesando registro...", Severity.Info);
            // Verificar si se seleccionó un archivo de imagen
            if (selectedFile != null)
            {
                // Subir la imagen y obtener la URL
                var imageUrl = await ImageUploadService.UploadImage(selectedFile);
                Console.WriteLine(imageUrl);
                if (!string.IsNullOrEmpty(imageUrl))
                {
                    newUser.Image = imageUrl; // Asignar la URL de la imagen al usuario
                                              // Snackbar.Add("La imagen se ha guardado correctamente.", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Error al subir la imagen.", Severity.Error);
                    return; // Detener el proceso si la imagen no se subió
                }
            }

            // Crear el usuario
            await UserService.CreateUser(newUser);
            isProcessing = false; // Indicar que se ha completado el proceso
            Snackbar.Clear(); // Limpiar los mensajes de notificación
            Snackbar.Add("Registro realizado con éxito.", Severity.Success);
            navigation.NavigateTo("/login");
        }
        catch (ApplicationException ex)
        {
            Snackbar.Add($"Error al registrar usuario: {ex.Message}", Severity.Error);
        }
    }

    //Manejo del archivo seleccionado

    IList<IBrowserFile> _files = new List<IBrowserFile>();
    private void UploadFiles(IBrowserFile file)
    {
        _files.Add(file);
    }

    private void OnFileSelected(IBrowserFile file)
    {
        if(file != null)
        {
            selectedFile = file; // Asignar el archivo seleccionado
            Snackbar.Add("La imagen se ha cargado correctamente.", Severity.Info);
        }
        else
        {
            Snackbar.Add("Error al cargar la imagen.", Severity.Error);
        }

    }

}