@page "/register"
@using System.ComponentModel.DataAnnotations

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator />
    <div class="container-principal">

        <div class="container-secundario">
        
        <MudItem xs="12" sm="12">
            <div class="header-container">
                
                <img src="images/logo4.svg" alt="logo" />
                
            </div>

            <div class ="subtitle-register">
                <h1>Registrarse</h1>
                <ul>
                    <li>
                        <a>¿ya tienes una cuenta?</a>
                        <a class="ingreso" href="login"> Ingresa aqui</a>
                    </li>
                </ul>
            </div>
            
            <div class="register-container">
                
                <div class="register-container-1">

                    <div class="button">
                            <MudTextField Label="Nombres" InputStyle="color: #FF5733" Variant="Variant.Outlined" HelperTextOnFocus="true" HelperText="Max. 8 characters" Margin="Margin.Dense"
                                          ShrinkLabel @bind-Value="model.name" For="@(() => model.name)" />
                    </div>

                        <div class="button">
                            <MudTextField Label="DNI" Variant="Variant.Outlined" Margin="Margin.Dense"
                                          ShrinkLabel @bind-Value="model.DNI" For="@(() => model.DNI)" />
                    </div>

                        <div class="button">
                            <MudTextField Label="Lugar de Nacimiento" Variant="Variant.Outlined" Margin="Margin.Dense"
                                          ShrinkLabel @bind-Value="model.PlaceOfBirth" For="@(() => model.PlaceOfBirth)" />
                    </div>

                        <div class="button">
                            <MudTextField Label="Email" Class="mt-3" Variant="Variant.Outlined" Margin="Margin.Dense"
                                          ShrinkLabel @bind-Value="model.Email" For="@(() => model.Email)" />
                    </div>
                    
                    <div class="button">
                            <MudTextField Label="Password" Variant="Variant.Outlined" HelperTextOnFocus="true" HelperText="Repeat the password" Class="mt-3" Margin="Margin.Dense"
                                          ShrinkLabel @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
                    </div>
                    
                    
                    
                    
                        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                            <ActivatorContent>
                                <MudButton Style="width:35vh" Variant="Variant.Filled"
                                           Color="Color.Info"
                                           StartIcon="@Icons.Material.Filled.CloudUpload">
                                    Upload Image
                                </MudButton>
                            </ActivatorContent>
                        </MudFileUpload>
                </div>

                <div class="register-container-2">

                        <div class="button">
                            <MudTextField Label="Apellidos" Variant="Variant.Outlined" HelperTextOnFocus="true" HelperText="Max. 8 characters" Margin="Margin.Dense"
                                          ShrinkLabel @bind-Value="model.lastname" For="@(() => model.lastname)" />
                    </div>

                        <div class="button">
                            <MudTextField Label="Género" Variant="Variant.Outlined" Margin="Margin.Dense"
                                          ShrinkLabel @bind-Value="model.gender" For="@(() => model.gender)" />
                    </div>

                        <div class="button">
                            <MudTextField Label="Dirección" Variant="Variant.Outlined" Margin="Margin.Dense"
                                          ShrinkLabel @bind-Value="model.address" For="@(() => model.address)" />
                    </div>

                        <div class="button">
                            <MudTextField Label="Confirm Password" Variant="Variant.Outlined" HelperTextOnFocus="true" HelperText="Repeat the password" Class="mt-3" Margin="Margin.Dense"
                                          ShrinkLabel @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
                    </div>

                        <div class="button">
                            <MudTextField Style="height:7vh" T="DateTime?" Format="yyyy-MM-dd" Label="Fecha de Nacimiento" Variant="Variant.Outlined" InputType="InputType.Date" Required="true" />
                    </div>
                    
                </div>
                
            </div>
        </MudItem >

        <MudItem Style="padding-top:14px">
            <MudImage Src="images/logo2.svg" Fluid="true"/>

        </MudItem>
        </div>
                
    </div>

</EditForm>


@code {
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
        public string name { get; set; }

        [Required]
        [StringLength(8, ErrorMessage = "Lastname length can't be more than 8.")]
        public string lastname { get; set; }

        [Required]
        [StringLength(8, ErrorMessage = "Lastname length can't be more than 8.")]
        public string Username { get; set; }

        [Required]
        public string DNI { get; set; }

        [Required]
        public string birthdate { get; set; }

        [Required]
        public string PlaceOfBirth { get; set; }

        [Required]
        public string gender { get; set; }

        [Required]
        public string address { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }

    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }


    public string Password { get; set; } 

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    IList<IBrowserFile> _files = new List<IBrowserFile>();
    private void UploadFiles(IBrowserFile file)
    {
        _files.Add(file);
        //TODO upload the files to the server
    }
}