@page "/editprofile"

@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using WonderPlane.Shared
@using WonderPlane.Client.Services
@using System.Net.Http.Json
@using MudBlazor
@using CurrieTechnologies.Razor.SweetAlert2

@inject NavigationManager navigation
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService UserService
@inject HttpClient Http;
@inject ImageUploadService ImageUploadService
@inject CountryService CountryService;
@inject SweetAlertService Swal

<PageTitle>Perfil</PageTitle>


<AsideMenu />
<main class="contain poppins-light">

    <section class="edit-image">
        <div class="img-change">

            @if (!string.IsNullOrEmpty(userInfo?.Image))
            {
                <img src="@userInfo.Image" alt="Profile Image" class="profile-image" />
            }
            else
            {
                <MudAvatar Class="profile-avatar" Color="@Color.Info" style="height:200px; width:200px; font-size:6rem;">
                    @GetInitials(userInfo)
                </MudAvatar>
            }

            <div class="img-change-button">
                <MudFileUpload T="IBrowserFile" FilesChanged="OnFileSelected">
                    <ActivatorContent>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Large"/>
                    </ActivatorContent>
                </MudFileUpload>
            </div>
        </div>
        <h1>@FullName</h1>
        <h6>@userInfo?.UserName</h6>
        <AuthorizeView Roles="Admin">
            <span class="poppins-light">(Administrador)</span>
        </AuthorizeView>
    </section>


    <section class="configuration-section">

        <EditForm Model="@userInfo" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />

            <section class="edit-section">
                <article class="basic-info">
                    <h3>Información Básica</h3>
                    <table>
                        @foreach (var field in basicInfoFields)
                        {
                            <tr>
                                <td><span class="poppins-semibold">@field.Label:</span></td>
                                <td>
                                    @if (field.IsEditing)
                                    {
                                        if (field.InputType == "select")
                                        {
                                            <select class="form-control" @bind="field.Value" @ref="field.InputRef" @onblur="() => FinishEditing(field)">
                                                <option value="">Seleccione un país</option>
                                                @foreach (var country in countries)
                                                {
                                                    <option value="@country">@country</option>
                                                }
                                            </select>
                                        }
                                        else if(field.InputType == "selectg")
                                        {
                                            <select class="form-control" @bind="field.Value" @ref="field.InputRef" @onblur="() => FinishEditing(field)">
                                                <option value="Masculino">Masculino</option>
                                                <option value="Femenino">Femenino</option>
                                                <option value="Prefiero no decirlo">Prefiero no decirlo</option>
                                                <option value="Otro">Otro</option>
                                            </select>
                                        }
                                        else
                                        {
                                            <input type="@field.InputType" min="1940-01-01" max="2006-12-31" @bind="field.Value" @ref="field.InputRef" @onblur="() => FinishEditing(field)" class="input-no-border" />
                                            <ul class="field-messages">
                                                @foreach (var message in field.Messages)
                                                {
                                                    <li>@message</li>
                                                }
                                            </ul>
                                            <ValidationMessage For="@(() => field.Value)"></ValidationMessage>
                                        }

                                    }
                                    else
                                    {
                                        <span>@field.Value</span>
                                        <ValidationMessage For="@(() => field.Value)"></ValidationMessage>
                                    }
                                </td>
                                <td>
                                    <MudIconButton Color="Color.Info" Icon="@Icons.Material.Filled.Edit" @onclick="() => StartEditing(field)" />
                                </td>
                            </tr>
                        }
                    </table>
                </article>

                
                    <hr class="vertical-hr" />
                    <article class="system-configuration">
                    <AuthorizeView Roles="RegisteredUser" Context="authContext">
                        <h3>Configuración del Sistema</h3>
                        <table>
                            @if (userInfo != null)
                            {
                                <tr>
                                    <td><span class="poppins-semibold">Recibir Notificaciones</span></td>
                                    <td>
                                        <MudSwitch @bind-Value="userInfo.ReciveNotifications" Color="Color.Info" @onclick="() => OnSwitchChange()" />
                                    </td>
                                </tr>
                                <tr>
                                    <td><span class="poppins-semibold">Suscrito a noticias</span></td>
                                    <td>
                                        <MudSwitch @bind-Value="userInfo.IsSuscribedToNews" Color="Color.Info" @onclick="() => OnSwitchChange()" />
                                    </td>
                                </tr>
                            }
                        </table>
                    </AuthorizeView>
                        <h3>Seguridad</h3>
                        <table>
                        <tr>
                            <td><span class="poppins-semibold">Contraseña</span></td>
                            <td class="change-password" onclick="@(() => showChangePassword())">Cambiar contraseña</td>
                        </tr>
                        <AuthorizeView Roles="RegisteredUser" Context="authContext">
                            <Authorized>
                                
                            <tr>
                                <td><span class="poppins-semibold">Medios de pago</span></td>
                                <td class="change-password">Gestionar tarjetas</td>
                            </tr>
                            <tr>
                                @if(userInfo != null)
                                {
                                    <td class="poppins-regular delete-account-button" onclick="@(() => confirmDelete(userInfo.Id))">Eliminar cuenta</td>
                                }
                            </tr>
                            </Authorized>
                        </AuthorizeView>
                        </table>
                    </article>
                
                <ValidationSummary />
            </section>
            @if (_hasChanges)
            {
                <div class="options-has-changes">
                    <button class="button confirm-button" type="submit">Guardar</button>
                    <button class="button discard-button" type="submit" @onclick="DiscardChanges">Descartar</button>
                </div>
            }
        </EditForm>
    </section>

    @if (_showChangePassword)
    {
        <article class="password-form">
            <EditForm Model="@user" OnValidSubmit="ChangePassword">
                <DataAnnotationsValidator />

                <h2>Nueva contraseña</h2>

                <div class="form-container">

                    <div class="input">
                        <label class="form-label">Contraseña actual</label>
                        <input type="password" class="form-control" @bind-value="user.OldPassword" />
                        <span class="small-validation-message"><ValidationMessage For="@(() => user.OldPassword)"></ValidationMessage></span>
                    </div>

                    <div class="input">
                        <label class="form-label">Nueva contraseña</label>
                        <input type="password" class="form-control" @bind-value="user.NewPassword" />
                        <span class="small-validation-message"><ValidationMessage For="@(() => user.NewPassword)"></ValidationMessage></span>
                    </div>

                    <div class="input">
                        <label class="form-label">Confirmar nueva contraseña</label>
                        <input type="password" class="form-control" @bind-value="user.ConfirmNewPassword" />
                        <span class="small-validation-message"><ValidationMessage For="@(() => user.ConfirmNewPassword)"></ValidationMessage></span>
                    </div>
                </div>

                <div class="form-button">
                    <button class="button confirm-button" type="submit">Cambiar</button>
                    <button class="button discard-button" type="submit" @onclick="showChangePassword">Descartar</button>
                </div>
            </EditForm>
        </article>
    }   

</main>


@code
{
    //Variables

    private UserInfo? userInfo;
    private UserInfo? originalUserInfo;
    public string FullName => $"{userInfo?.Name} {userInfo?.LastName}";
    private List<string> countries = new List<string>();
    private IBrowserFile? selectedFile;
    IList<IBrowserFile> _files = new List<IBrowserFile>();
    private bool _showChangePassword = false;
    private bool _hasChanges = false;

    //Gestión de campos editables

    public class EditableField
    {
        public string Label { get; set; }
        public string Value { get; set; }
        public bool IsEditing { get; set; } = false;
        public ElementReference InputRef { get; set; } // Referencia al input
        public string InputType { get; set; }
        public List<string> Messages { get; set; }

        public EditableField(string label, string value, string inputType = "text", List<string>? messages = null)
        {
            Label = label;
            Value = value;
            InputType = inputType;
            Messages = messages ?? new List<string>();
        }
    }

    private List<EditableField> basicInfoFields = new()
    {
        new EditableField("Nombre", string.Empty, "text", new List<string> { "Debe tener entre 2 y 20 caracteres." }),
        new EditableField("Apellidos", string.Empty, "text", new List<string> { "Debe tener entre 2 y 50 caracteres." }),
        new EditableField("Genero", string.Empty, "selectg"),
        new EditableField("Nombre de usuario", string.Empty, "text", new List<string> { "Debe tener entre 5 y 20 caracteres."}),
        new EditableField("Correo Electrónico", string.Empty, "text", new List<string> { "Debe ser un correo válido (ej: usuario@ejemplo.com)." }),
        new EditableField("Fecha de Nacimiento", string.Empty, "date"),
        new EditableField("Teléfono", string.Empty, "tel", new List<string> { "Debe contener solo números.", "Debe tener 10 dígitos." }),
        new EditableField("Dirección", string.Empty, "text", new List<string> { "Max 50 caracteres." }),
        new EditableField("Pais", string.Empty, "select")
    };

    // Dto para el cambio de contraseña
    ChangePasswordDto user = new ChangePasswordDto
        {
            Id = 0,
            OldPassword = string.Empty,
            NewPassword = string.Empty,
            ConfirmNewPassword = string.Empty
        };

    // Al iniciar la pagina

    protected override async Task OnInitializedAsync()
    {
        countries = await CountryService.GetCountriesAsync();
        // Escuchar cambios en el estado de autenticación
        AuthenticationStateProvider.AuthenticationStateChanged += async (task) =>
        {
            var authState = await task;
            var user = authState.User;

            if (user?.Identity?.IsAuthenticated == true)
            {
                // Obtener la claim del usuario autenticado
                var userInfoClaim = user.FindFirst("UserInfo");
                if (userInfoClaim != null)
                {
                    userInfo = JsonSerializer.Deserialize<UserInfo>(userInfoClaim.Value);

                    if (userInfo is not null)
                    {
                        // Guardar el ID del usuario en la propiedad user.Id
                        this.user.Id = userInfo.Id;
                        // Rellenar los campos con la información del objeto User
                        basicInfoFields[0].Value = userInfo.Name;
                        basicInfoFields[1].Value = userInfo.LastName;
                        basicInfoFields[2].Value = userInfo.Gender;
                        basicInfoFields[3].Value = userInfo.UserName;
                        basicInfoFields[4].Value = userInfo.Email;
                        basicInfoFields[5].Value = userInfo.BirthDate.ToString("yyyy-MM-dd");
                        basicInfoFields[6].Value = userInfo?.PhoneNumber ?? string.Empty;
                        basicInfoFields[7].Value = userInfo?.Address ?? string.Empty;
                        basicInfoFields[8].Value = userInfo?.Country ?? string.Empty;

                        //Guardamos el usuario original en caso de descartar los cambios
                        originalUserInfo = JsonSerializer.Deserialize<UserInfo>(userInfoClaim.Value);
                    }
                }
            }
            else
            {
                userInfo = null; // Limpiar la información si no está autenticado
            }

            // Actualizar la UI después del cambio
            StateHasChanged();
        };

        // Llamada inicial para cargar el estado
        var initialAuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var initialUser = initialAuthState.User;

        if (initialUser?.Identity?.IsAuthenticated == true)
        {
            var userInfoClaim = initialUser.FindFirst("UserInfo");
            if (userInfoClaim != null)
            {
                userInfo = JsonSerializer.Deserialize<UserInfo>(userInfoClaim.Value);
            }
        }
    }

    // Al enviar el formulario de edición

    private async Task HandleValidSubmit()
    {
        // Actualizar los campos de userInfo con los valores de los campos editables
        if (userInfo != null)
        {
            userInfo.Name = basicInfoFields[0].Value;
            userInfo.LastName = basicInfoFields[1].Value;
            userInfo.Gender = basicInfoFields[2].Value;
            userInfo.UserName = basicInfoFields[3].Value;
            userInfo.Email = basicInfoFields[4].Value;
            userInfo.BirthDate = DateTime.Parse(basicInfoFields[5].Value);
            userInfo.PhoneNumber = basicInfoFields[6].Value;
            userInfo.Address = basicInfoFields[7].Value;
            userInfo.Country = basicInfoFields[8].Value;

            // Llamar al servicio para actualizar la información en el backend
            var result = await Http.PutAsJsonAsync("api/user/update", userInfo);

            if (result.IsSuccessStatusCode)
            {
                // Snackbar.Add("Información actualizada correctamente.", Severity.Success);
                // Notificar el cambio de estado
                _hasChanges = false;
                ReloadEditableFields();
                StateHasChanged();

                var resultado = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Cambios guardados",
                        Text = "Los cambios se han guardado correctamente.",
                        Icon = SweetAlertIcon.Success
                    });

                if (AuthenticationStateProvider is CustomAuthenticationStateProvider customProvider)
                {
                    await customProvider.GetAuthenticationStateAsync();
                }
            }
            else
            {
                // Snackbar.Add("Error al actualizar la información. Porfavor revisa que los datos sean correctos. hemos restaurado los datos originales", Severity.Error);

                var error = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error al actualizar",
                    Text = "Por favor revisa que los datos sean correctos.",
                    Icon = SweetAlertIcon.Error
                });

                if (originalUserInfo != null)
                {
                    userInfo = JsonSerializer.Deserialize<UserInfo>(JsonSerializer.Serialize(originalUserInfo));

                    ReloadEditableFields();
                }
            }
        }

        // _hasChanges = false;
        // ReloadEditableFields();
        // StateHasChanged();

        // var resultado = await Swal.FireAsync(new SweetAlertOptions
        // {
        //     Title = "Cambios guardados",
        //     Text = "Los cambios se han guardado correctamente.",
        //     Icon = SweetAlertIcon.Success
        // });
    }

    // Manejo de archivos

    private void UploadFiles(IBrowserFile file)
    {
        _files.Add(file);
    }

    private async Task OnFileSelected(IBrowserFile file)
    {
        if (file != null)
        {
            selectedFile = file;
            _hasChanges = true;
            Snackbar.Add("No olvides guardar tus cambios en el botón de abajo", Severity.Info);

            if (selectedFile != null)
            {
                var imageUrl = await ImageUploadService.UploadImage(selectedFile);
                Console.WriteLine(imageUrl);

                if (!string.IsNullOrEmpty(imageUrl) && userInfo != null)
                {
                    userInfo.Image = imageUrl;
                    Snackbar.Add("Imagen subida correctamente.", Severity.Info);
                }
                else
                {
                    Snackbar.Add("Error al subir la imagen.", Severity.Error);
                    return;
                }
            }
        }
        else
        {
            Snackbar.Add("Error al cargar la imagen.", Severity.Error);
        }

    }

    // Switches
    private void OnSwitchChange()
    {
        _hasChanges = true; 
    }


    //Estados de edición

    public async Task StartEditing(EditableField field)
    {
        field.IsEditing = true;
        await Task.Delay(1); 
        await field.InputRef.FocusAsync();
        _hasChanges = true;
    }

    private void FinishEditing(EditableField field)
    {
        field.IsEditing = false;
        _hasChanges = true; 
        StateHasChanged(); 
    }

    private void DiscardChanges()
    {
        if (originalUserInfo != null)
        {
            userInfo = JsonSerializer.Deserialize<UserInfo>(JsonSerializer.Serialize(originalUserInfo));

            ReloadEditableFields();
        }

        var resultado = Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Cambios descartados",
            Text = "Los cambios no se han realizado.",
            Icon = SweetAlertIcon.Info
        });
    }

    private void ReloadEditableFields()
    {
        if (userInfo != null)
        {
            basicInfoFields[0].Value = userInfo.Name;
            basicInfoFields[1].Value = userInfo.LastName;
            basicInfoFields[2].Value = userInfo.Gender;
            basicInfoFields[3].Value = userInfo.UserName;
            basicInfoFields[4].Value = userInfo.Email;
            basicInfoFields[5].Value = userInfo.BirthDate.ToString("yyyy-MM-dd");
            basicInfoFields[6].Value = userInfo?.PhoneNumber ?? string.Empty;
            basicInfoFields[7].Value = userInfo?.Address ?? string.Empty;
            basicInfoFields[8].Value = userInfo?.Country ?? string.Empty;

            _hasChanges = false;
            StateHasChanged();
        }
    }

    // Desactivar usuario
    private async void DeleteUser(int id)
    {
        var result = await Http.PutAsync($"api/user/deactivate/{id}", null);

        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add("Usuario eliminado correctamente.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Error al eliminar usuario.", Severity.Error);
        }

        await Logout();

    }

    // Método para cerrar sesión
    private async Task Logout()
    {
        // Eliminar token y limpiar estado local
        await JS.InvokeVoidAsync("localStorage.removeItem", "Token");

        // Notificar al proveedor de autenticación que el usuario ha cerrado sesión
        var authStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        authStateProvider.NotifyUserLogout();

        // Limpiar información del usuario en memoria
        userInfo = null;

        // Volver a cargar el estado de autenticación y actualizar la UI
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        StateHasChanged();

        // Redirigir al login
        navigation.NavigateTo("/login");
    }

    private void confirmDelete(int id)
    {
        var delete = Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Eliminar cuenta",
            Text = "¿Estás seguro de que deseas eliminar tu cuenta?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Eliminar",
            CancelButtonText = "Cancelar"
        });

        if (delete.Result.IsConfirmed)
        {
            DeleteUser(id);
            var confirmdelete = Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Cuenta eliminada",
                Text = "Tu cuenta ha sido eliminada correctamente.",
                Icon = SweetAlertIcon.Success
            });
        }

    }

    // Cambiar contraseña

    private void showChangePassword()
    {
        _showChangePassword = !_showChangePassword;
        ResetPasswordForm();
    }

    private void ResetPasswordForm()
    {
        user.OldPassword = string.Empty;
        user.NewPassword = string.Empty;
        user.ConfirmNewPassword = string.Empty;
    }

    private async Task ChangePassword()
    {

        try
        {
            var result = await UserService.ChangePasswordAsync(user);
            Snackbar.Clear();
            // Snackbar.Add("Contraseña cambiada con éxito.", Severity.Success);
            var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Contraseña cambiada",
                Text = "Tu contraseña ha sido cambiada correctamente.",
                Icon = SweetAlertIcon.Success
            });

            showChangePassword();
        }
        catch (ApplicationException ex)
        {
            // Snackbar.Add(ex.Message, Severity.Error);
            var error = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Error al cambiar contraseña",
                Text = ex.Message,
                Icon = SweetAlertIcon.Error
            });
        
        }
    }

    // Método para obtener las iniciales del nombre del usuario
    private string GetInitials(UserInfo? userInfo)
    {
        if (userInfo == null) return "NN";

        var initials = $"{userInfo.Name?.FirstOrDefault()}{userInfo.LastName?.FirstOrDefault()}";
        return initials.ToUpper();
    }

}