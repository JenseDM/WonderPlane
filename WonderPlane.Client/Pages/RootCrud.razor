@page "/rootcrud"
@attribute [Authorize (Roles = "Root")]

<link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />

@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using System.Collections.Generic
@using WonderPlane.Client.Components
@using System.Net.Http.Json
@using System.Threading
@using System.Linq
@using CurrieTechnologies.Razor.SweetAlert2;


@inject NavigationManager navigation;
@inject HttpClient Http;
@inject ISnackbar Snackbar;
@inject SweetAlertService Swal

<PageTitle>Gestión de administradores</PageTitle>


<AsideMenu />

<main class="contain poppins-light">
    <h1>Administradores</h1>

    <section class="table-admins">
        <!-- Cabecera del formulario -->
        <div class="create-button">

            <div class="button" onclick="@(() => showFormCreate())"><span class="material-symbols-outlined">add</span>Crear usuario</div>
    
            <MudTextField T="string" ValueChanged="@OnSearch" Immediate="true" Placeholder="Buscar"
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"></MudTextField>
        </div>

        <!-- Formulario -->
        <MudTable Items="_admins" Striped="false" Hover="true" Bordered="false" RowsPerPage="5" ServerData="ServerReload" @ref="_table">
            
            <HeaderContent>
                <MudTh>Avatar</MudTh>
                <MudTh>Id</MudTh>
                <MudTh>Num. Documento</MudTh>
                <MudTh>Nombre</MudTh>
                <MudTh>Apellidos</MudTh>
                <MudTh>Usuario</MudTh>
                <MudTh>Correo</MudTh>
                <MudTh>Acciones</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Avatar">
                    @if (!string.IsNullOrWhiteSpace(context.Image))
                    {
                        <MudAvatar>
                            <MudImage Src="@context.Image" Alt="Imagen de perfil del administrador"></MudImage>
                        </MudAvatar>
                    }
                    else
                    {
                        <MudAvatar Color="@Color.Info" Size="Size.Medium" Style="margin-right:5px;">
                            @GetInitials(context)
                        </MudAvatar>
                    }

                </MudTd>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Documento de Identidad">@context.Document</MudTd>
                <MudTd DataLabel="Nombre">@context.Name</MudTd>
                <MudTd DataLabel="Apellidos">@context.LastName</MudTd>
                <MudTd DataLabel="Nombre de usuario">@context.UserName</MudTd>
                <MudTd DataLabel="Correo">@context.Email</MudTd>

                <MudTd DataLabel="Acciones">
                    <MudIconButton Icon="material-symbols-outlined/delete" aria-label="cancel" Color="Color.Error" OnClick="@(() => showConfirmDelete(context.Id, context.Name))" />
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager />
            </PagerContent>

        </MudTable>
    </section>

    <!-- Formulario para crear usuario -->
    @if (_showCreateUser)
    {
        <div class="create-user-container @( _showCreateUser ? "show" : "" )">
            <span onclick="@(() => showFormCreate())" class="material-symbols-outlined">close</span>
            <CreateUser OnUserCreated="showFormCreate" />
        </div>
    }

</main>

@code {

    private MudTable<Admin>? _table; // Referencia a la tabla de administradores
    private bool _showCreateUser = false;
    private bool isFormVisible = false;
    private string _searchString = "";  
    private List<Admin> _admins = new List<Admin>();
    private int selectedAdminId;
    private string? selectedAdminName;

    public class Admin
    {
        public int Id { get; set; }
        public string? Document { get; set; }
        public string? UserName { get; set; }
        public string? Name { get; set; }
        public string? LastName { get; set; }
        public string? Email { get; set; }
        public bool IsActive { get; set; }
        public string? Image { get; set; }
    }


    // Cargar administradores al inicializar
    protected override async Task OnInitializedAsync()
    {
        await LoadAdmins(); // Cargar los administradores al inicializar
    }

    // Función para buscar administradores
    private async Task OnSearch(string text)
    {
        _searchString = text;
        if (_table != null)
        {
            await _table.ReloadServerData();
        }

    }

    // Filtro de la tabla
    private bool _adminFilter(Admin admin)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return (admin?.Name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (admin?.LastName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (admin?.Document?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (admin?.Email?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false);
    }

    // Función para recargar la tabla
    private async Task<TableData<Admin>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        await LoadAdmins(); // Cargar la lista actualizada de administradores

        var filteredAdmins = _admins.Where(a => _adminFilter(a)).ToList();
        var pagedAdmins = filteredAdmins.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();

        return new TableData<Admin>
            {
                Items = pagedAdmins,
                TotalItems = filteredAdmins.Count
            };
    }

    // Función para cargar administradores
    private async Task LoadAdmins()
    {
        var response = await Http.GetFromJsonAsync<List<Admin>>("api/admins"); // Llama a tu API para obtener la lista de administradores
        _admins = response ?? new List<Admin>();
    }

    // Función para borrar administrador
    private async void DeleteAdmin(int id)
    {
        var result = await Http.PutAsync($"api/admin/deactivate/{id}", null);

        if (result.IsSuccessStatusCode)
        {
            // Snackbar.Add("Administrador desactivado correctamente.", Severity.Success);
            var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Administrador desactivado",
                Text = "El administrador ha sido desactivado correctamente.",
                Icon = SweetAlertIcon.Success
            });
            await LoadAdmins();
            if (_table != null)
            {
                await _table.ReloadServerData();
            }
        }
        else
        {
            Snackbar.Add("Error al desactivar administrador.", Severity.Error);
        }
    }


    // Función para mostrar el formulario de crear usuario
    public async Task showFormCreate()
    {
        if (_showCreateUser)
        {
            // Inicia la animación de salida al quitar la clase 'show'
            _showCreateUser = false;
            await Task.Delay(500); // Espera a que la animación se complete
            StateHasChanged();
        }
        else
        {
            // Muestra el formulario añadiendo la clase 'show'
            _showCreateUser = true;
        }

        // Recargar datos en la tabla si es necesario
        if (_table != null)
        {
            await _table.ReloadServerData();
        }
    }

    // Función para mostrar la confirmación de eliminar usuario
    public async void showConfirmDelete(int? id = null, string? name = null)
    {
        if (id.HasValue && name != null)
        {
            selectedAdminId = id.Value;  // Establecer el ID si está disponible
            selectedAdminName = name;  // Establecer el nombre si está disponible
        }

        // _showDeleteUser = !_showDeleteUser;  Alternar la visibilidad del modal

        var resultado = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "¿Está seguro de que desea eliminar al usuario?",
            Text = $"El usuario {selectedAdminName} será eliminado.",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Eliminar",
            CancelButtonText = "Cancelar"
        });

        if(resultado.IsConfirmed)
        {
            DeleteAdmin(selectedAdminId);

        }
    }

    // Método para obtener las iniciales del nombre del usuario

    private string GetInitials(Admin admin)
    {
        if (string.IsNullOrWhiteSpace(admin.Name) || string.IsNullOrWhiteSpace(admin.LastName))
        {
            return "";
        }

        return $"{admin.Name[0]}{admin.LastName[0]}";
    }

}
