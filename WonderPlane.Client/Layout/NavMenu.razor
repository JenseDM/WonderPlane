@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using WonderPlane.Shared

@inject NavigationManager navigation
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider

<nav class="poppins-light">
    <div class="navbar-logo poppins-regular">
        <img src="img/Wblack.png" alt="Logo" />
        <span>WonderPlane</span>
    </div>

    <ul class="menu-horizontal">
        <li><a href="/">Inicio</a></li>
        <li>
            <a href="#">Buscar vuelos</a>
            <ul class="menu-vertical">
                <li><a href="#">Nacional</a></li>
                <li><a href="#">Internacional</a></li>
            </ul>
        </li>

        <AuthorizeView Roles="Root">
            <Authorized>
                <li><a href="/rootcrud">Gestionar Administradores</a></li>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView Roles="Admin">
            <Authorized>
                <li><a href="/admin">Gestionar vuelos</a></li>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView>
            <Authorized>
                <li>
                    <a class="profile" href="#">
                        @if (!string.IsNullOrEmpty(userInfo?.Image))
                        {
                            <img src="@userInfo?.Image" />
                        }
                        else
                        {
                            <MudAvatar Class="profile-avatar" Color="@Color.Info" Size="Size.Medium" Style="margin-right:5px;">
                                @GetInitials(userInfo)
                            </MudAvatar>
                        }
                        @userInfo?.UserName
                    </a>
                    <ul class="menu-vertical">
                        <li><a href="/editprofile">Ver perfil</a></li>
                        <li><a href="#" @onclick="Logout">Cerrar sesión</a></li>
                    </ul>
                </li>
            </Authorized>
            <NotAuthorized>
                <li><a href="/login">Iniciar sesión</a></li>
                <li><a href="/register">Registrarse</a></li>
            </NotAuthorized>
        </AuthorizeView>

    </ul>
</nav>

@code {
    private UserInfo? userInfo;

    protected override async Task OnInitializedAsync()
    {
        // Escuchar cambios en el estado de autenticación
        AuthenticationStateProvider.AuthenticationStateChanged += async (task) =>
        {
            var authState = await task;
            var user = authState.User;

            if (user?.Identity?.IsAuthenticated == true)
            {
                // Obtener la claim del usuario autenticado
                var userInfoClaim = user.FindFirst("UserInfo");
                if (userInfoClaim != null)
                {
                    userInfo = JsonSerializer.Deserialize<UserInfo>(userInfoClaim.Value);
                }
            }
            else
            {
                userInfo = null; // Limpiar la información si no está autenticado
            }

            // Actualizar la UI después del cambio
            StateHasChanged();
        };

        // Llamada inicial para cargar el estado
        var initialAuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var initialUser = initialAuthState.User;

        if (initialUser?.Identity?.IsAuthenticated == true)
        {
            var userInfoClaim = initialUser.FindFirst("UserInfo");
            if (userInfoClaim != null)
            {
                userInfo = JsonSerializer.Deserialize<UserInfo>(userInfoClaim.Value);
            }
        }
    }

    // Método para cerrar sesión
    private async Task Logout()
    {
        // Eliminar token y limpiar estado local
        await JS.InvokeVoidAsync("localStorage.removeItem", "Token");

        // Notificar al proveedor de autenticación que el usuario ha cerrado sesión
        var authStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        authStateProvider.NotifyUserLogout();

        // Limpiar información del usuario en memoria
        userInfo = null;

        // Volver a cargar el estado de autenticación y actualizar la UI
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        StateHasChanged();

        // Redirigir al login
        navigation.NavigateTo("/login");
    }

    // Método para obtener las iniciales del nombre del usuario
    private string GetInitials(UserInfo? userInfo)
    {
        if (userInfo == null) return "NN";

        var initials = $"{userInfo.Name?.FirstOrDefault()}{userInfo.LastName?.FirstOrDefault()}";
        return initials.ToUpper();
    }
}
